# ==========================================
# 🔎 파이썬 딕셔너리(Dictionary)
# ==========================================
# - 현실의 "사전(Dictionary)"과 비슷한 개념
# - "단어 → 뜻"이 연결되듯, 딕셔너리도 "키(Key) → 값(Value)" 쌍으로 데이터를 저장
#
# ✅ 기본 예시:
# student = {
#     "이름": "Sally",
#     "나이": 24,
#     "학교": "서울여대"
# }
#
# - "이름", "나이", "학교" 👉 Key (검색할 이름표 같은 것)
# - "Sally", 24, "서울여대" 👉 Value (Key에 해당하는 값)

# ==========================================
# 🔎 딕셔너리 사용법
# ==========================================
# student = {
#     "이름": "Sally",
#     "나이": 24,
#     "학교": "서울여대"
# }
#
# # 값 조회
# print(student["이름"])   # Sally
# print(student["나이"])   # 24
#
# # 값 추가
# student["전공"] = "컴퓨터공학"
#
# # 값 수정
# student["나이"] = 24
#
# # 값 삭제
# del student["학교"]
#
# print(student)
# # {'이름': 'Sally', '나이': 25, '전공': '컴퓨터공학'}

# ==========================================
# 📌 딕셔너리 특징
# ==========================================
# 1. 키-값 쌍으로 저장된다 {key:value, key:value}
# 2. 키(Key)는 고유해야 한다 (중복 불가 ❌)
# 3. 값(Value)은 중복 가능하다
# 4. 순서가 없다 (단, Python 3.7+에서는 입력한 순서를 내부적으로 기억함)
# 5. 키는 변하지 않는 자료형만 가능(숫자, 문자열, 튜플)

# ==========================================
# 🖼️ 리스트(list) vs 딕셔너리(dict)
# ==========================================
# - 리스트: "순서(index)"로 찾는 저장소 → students[0]
# - 딕셔너리: "이름표(Key)"로 찾는 저장소 → student["이름"]

#생성 Create
student = {
    "name" : "최유정",
    "age" :  24,
    "major" : "컴퓨터공학"
}

#읽기 Read
print(f"student['name'] = {student['name']}")

#업데이트 Update
student['name'] = '이순신'
print(f'student = {student}')

#삭제
del student["name"]
print(f'student = {student}')

#추가
student['addr'] = '서울시 강서구'
print(f'student = {student}')